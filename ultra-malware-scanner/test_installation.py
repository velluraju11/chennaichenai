#!/usr/bin/env python3
"""
ReverseGod Installation Test Script
Tests basic functionality and tool availability
"""

import sys
import os
from pathlib import Path

# Add reversegod to path
sys.path.insert(0, str(Path(__file__).parent / "reversegod"))

def test_imports():
    """Test that all core modules can be imported"""
    print("🧪 Testing module imports...")
    
    try:
        from core.file_recon import FileRecon
        print("✅ FileRecon imported successfully")
    except ImportError as e:
        print(f"❌ FileRecon import failed: {e}")
        return False
    
    try:
        from core.disassembler import Disassembler
        print("✅ Disassembler imported successfully")
    except ImportError as e:
        print(f"❌ Disassembler import failed: {e}")
        return False
    
    try:
        from core.debugger import Debugger
        print("✅ Debugger imported successfully")
    except ImportError as e:
        print(f"❌ Debugger import failed: {e}")
        return False
    
    try:
        from core.patcher import Patcher
        print("✅ Patcher imported successfully")
    except ImportError as e:
        print(f"❌ Patcher import failed: {e}")
        return False
    
    try:
        from core.gemini_ai_core import GeminiAICore
        print("✅ GeminiAICore imported successfully")
    except ImportError as e:
        print(f"❌ GeminiAICore import failed: {e}")
        return False
    
    try:
        from core.report_engine import ReportEngine
        print("✅ ReportEngine imported successfully")
    except ImportError as e:
        print(f"❌ ReportEngine import failed: {e}")
        return False
    
    try:
        from utils.tool_runner import ToolRunner
        print("✅ ToolRunner imported successfully")
    except ImportError as e:
        print(f"❌ ToolRunner import failed: {e}")
        return False
    
    try:
        from utils.config_loader import ConfigLoader
        print("✅ ConfigLoader imported successfully")
    except ImportError as e:
        print(f"❌ ConfigLoader import failed: {e}")
        return False
    
    return True

def test_tool_availability():
    """Test availability of external tools"""
    print("\n🔧 Testing tool availability...")
    
    try:
        from utils.tool_runner import ToolRunner
        tool_runner = ToolRunner()
        available_tools = tool_runner.get_available_tools()
        
        essential_tools = ["file", "strings"]
        optional_tools = ["r2", "radare2", "gdb", "strace", "ltrace", "valgrind", "xxd", "hexdump"]
        
        print("\n📋 Essential Tools:")
        for tool in essential_tools:
            status = "✅" if available_tools.get(tool, False) else "❌"
            print(f"  {status} {tool}")
        
        print("\n📋 Optional Tools:")
        for tool in optional_tools:
            status = "✅" if available_tools.get(tool, False) else "⚠️"
            print(f"  {status} {tool}")
        
        essential_available = all(available_tools.get(tool, False) for tool in essential_tools)
        return essential_available
        
    except Exception as e:
        print(f"❌ Tool availability check failed: {e}")
        return False

def test_config_loading():
    """Test configuration loading"""
    print("\n⚙️ Testing configuration loading...")
    
    try:
        from utils.config_loader import ConfigLoader
        config = ConfigLoader()
        
        # Test basic config access
        timeout = config.get('tools.timeout_default', 60)
        print(f"✅ Default timeout: {timeout}s")
        
        # Test tool config
        r2_config = config.get_tool_config('radare2')
        print(f"✅ Radare2 config loaded: {len(r2_config)} settings")
        
        # Test validation
        validation = config.validate_config()
        if validation['valid']:
            print("✅ Configuration validation passed")
        else:
            print(f"⚠️ Configuration validation warnings: {validation['warnings']}")
            print(f"❌ Configuration validation errors: {validation['errors']}")
        
        return validation['valid']
        
    except Exception as e:
        print(f"❌ Configuration loading failed: {e}")
        return False

def test_cli_basic():
    """Test basic CLI functionality"""
    print("\n🖥️ Testing CLI functionality...")
    
    try:
        import subprocess
        
        # Test version command
        result = subprocess.run([
            sys.executable, "reversegod/cli.py", "version"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("✅ CLI version command works")
            print(f"   Output: {result.stdout.strip()}")
            return True
        else:
            print(f"❌ CLI version command failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"❌ CLI test failed: {e}")
        return False

def test_directory_structure():
    """Test that all required directories exist"""
    print("\n📁 Testing directory structure...")
    
    required_dirs = [
        "reversegod/core",
        "reversegod/utils", 
        "reversegod/data/templates",
        "reversegod/data/tool_configs",
        "reversegod/logs",
        "reversegod/reports/html",
        "reversegod/reports/json",
        "reversegod/reports/markdown"
    ]
    
    all_exist = True
    for dir_path in required_dirs:
        if Path(dir_path).exists():
            print(f"✅ {dir_path}")
        else:
            print(f"❌ {dir_path} (missing)")
            all_exist = False
    
    return all_exist

def main():
    """Run all tests"""
    print("🚀 ReverseGod Installation Test")
    print("=" * 50)
    
    tests = [
        ("Module Imports", test_imports),
        ("Directory Structure", test_directory_structure),
        ("Configuration Loading", test_config_loading),
        ("Tool Availability", test_tool_availability),
        ("CLI Basic Functionality", test_cli_basic)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"❌ {test_name} failed with exception: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("📊 Test Results Summary:")
    print("=" * 50)
    
    passed = 0
    for test_name, result in results:
        status = "✅ PASS" if result else "❌ FAIL"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\n🎯 Overall: {passed}/{len(results)} tests passed")
    
    if passed == len(results):
        print("🎉 All tests passed! ReverseGod is ready to use.")
        print("\n💡 Quick start:")
        print("   python reversegod/cli.py version")
        print("   python reversegod/cli.py recon <binary_file>")
        return 0
    else:
        print("⚠️ Some tests failed. Check the output above for details.")
        print("\n🔧 Common fixes:")
        print("   - Install missing Python packages: pip install -r requirements.txt")
        print("   - Install missing system tools (see README.md)")
        print("   - Check file permissions")
        return 1

if __name__ == "__main__":
    sys.exit(main())