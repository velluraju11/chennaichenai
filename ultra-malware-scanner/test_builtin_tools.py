#!/usr/bin/env python3
"""
Test script to demonstrate ReverseGod's built-in tools
"""

import sys
from pathlib import Path

# Add reversegod to path
sys.path.insert(0, str(Path(__file__).parent / "reversegod"))

from tools.tool_manager import ToolManager

def test_builtin_tools():
    """Test all built-in tools"""
    print("🔧 Testing ReverseGod Built-in Tools")
    print("=" * 50)
    
    tool_manager = ToolManager()
    test_file = Path("test_binary.py")
    
    if not test_file.exists():
        print("❌ Test file not found")
        return
    
    # Test file command
    print("\n📁 Testing Built-in File Command:")
    result = tool_manager.run_tool('file', ['-b', str(test_file)])
    print(f"   Result: {result['stdout'].strip()}")
    print(f"   Tool Used: {result.get('tool_used', 'unknown')}")
    
    # Test strings command
    print("\n🔤 Testing Built-in Strings Command:")
    result = tool_manager.run_tool('strings', [str(test_file)])
    strings = result['stdout'].strip().split('\n')[:5]  # First 5 strings
    print(f"   Found {len(result['stdout'].strip().split())} strings")
    print(f"   First 5 strings:")
    for i, string in enumerate(strings, 1):
        if string.strip():
            print(f"     {i}. {string.strip()}")
    print(f"   Tool Used: {result.get('tool_used', 'unknown')}")
    
    # Test xxd command
    print("\n🔢 Testing Built-in XXD Command:")
    result = tool_manager.run_tool('xxd', ['-l', '64', str(test_file)])
    lines = result['stdout'].strip().split('\n')[:3]  # First 3 lines
    print(f"   Hex dump (first 3 lines):")
    for line in lines:
        if line.strip():
            print(f"     {line}")
    print(f"   Tool Used: {result.get('tool_used', 'unknown')}")
    
    # Test hexdump command
    print("\n📊 Testing Built-in Hexdump Command:")
    result = tool_manager.run_tool('hexdump', ['-C', '-n', '64', str(test_file)])
    lines = result['stdout'].strip().split('\n')[:3]  # First 3 lines
    print(f"   Canonical hex dump (first 3 lines):")
    for line in lines:
        if line.strip():
            print(f"     {line}")
    print(f"   Tool Used: {result.get('tool_used', 'unknown')}")
    
    # Test comprehensive analysis
    print("\n🚀 Testing Comprehensive Analysis:")
    analysis = tool_manager.get_comprehensive_analysis(test_file)
    print(f"   File Type: {analysis['file_info'].get('description', 'Unknown')}")
    print(f"   Total Strings: {analysis['strings_analysis'].get('total_strings', 0)}")
    print(f"   File Entropy: {analysis['hex_analysis'].get('entropy', 0):.2f}")
    print(f"   Magic Signatures: {len(analysis['hex_analysis'].get('magic_bytes', []))}")
    print(f"   Tools Used: {', '.join(analysis['tools_used'])}")
    
    # Show tool status
    print("\n📋 Tool Status Summary:")
    tool_status = tool_manager.get_tool_status()
    for tool, status in tool_status.items():
        icon = "🔧" if status['builtin'] else "🌐"
        print(f"   {icon} {tool:12} - {status['status']} ({status['type']})")
    
    print("\n✅ Built-in tools test completed!")

if __name__ == "__main__":
    test_builtin_tools()