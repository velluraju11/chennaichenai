#!/usr/bin/env python3
"""
Advanced test script to demonstrate all ReverseGod built-in tools on suspicious sample
"""

import sys
from pathlib import Path

# Add reversegod to path
sys.path.insert(0, str(Path(__file__).parent / "reversegod"))

from tools.tool_manager import ToolManager

def test_advanced_tools():
    """Test all advanced built-in tools on suspicious sample"""
    print("🔧 Testing ReverseGod Advanced Built-in Tools")
    print("=" * 60)
    
    tool_manager = ToolManager()
    test_file = Path("test_sample.txt")
    
    if not test_file.exists():
        print("❌ Test file not found")
        return
    
    print(f"📁 Analyzing: {test_file.name}")
    print(f"📏 File size: {test_file.stat().st_size} bytes")
    print()
    
    # Test binwalk
    print("🔍 Testing Built-in Binwalk:")
    result = tool_manager.run_tool('binwalk', [str(test_file)])
    print(f"   Status: {'✅ Success' if result['success'] else '❌ Failed'}")
    print(f"   Tool Used: {result.get('tool_used', 'unknown')}")
    if result['success']:
        lines = result['stdout'].strip().split('\n')[:5]
        for line in lines:
            if line.strip():
                print(f"     {line}")
    print()
    
    # Test radare2
    print("🔍 Testing Built-in Radare2:")
    result = tool_manager.run_tool('r2', [str(test_file)])
    print(f"   Status: {'✅ Success' if result['success'] else '❌ Failed'}")
    print(f"   Tool Used: {result.get('tool_used', 'unknown')}")
    if result['success']:
        lines = result['stdout'].strip().split('\n')[:8]
        for line in lines:
            if line.strip():
                print(f"     {line}")
    print()
    
    # Test gdb
    print("🔍 Testing Built-in GDB:")
    result = tool_manager.run_tool('gdb', [str(test_file)])
    print(f"   Status: {'✅ Success' if result['success'] else '❌ Failed'}")
    print(f"   Tool Used: {result.get('tool_used', 'unknown')}")
    if result['success']:
        lines = result['stdout'].strip().split('\n')[:8]
        for line in lines:
            if line.strip():
                print(f"     {line}")
    print()
    
    # Test strace
    print("🔍 Testing Built-in Strace:")
    result = tool_manager.run_tool('strace', ['-f', str(test_file)])
    print(f"   Status: {'✅ Success' if result['success'] else '❌ Failed'}")
    print(f"   Tool Used: {result.get('tool_used', 'unknown')}")
    if result['success']:
        lines = result['stdout'].strip().split('\n')[:6]
        for line in lines:
            if line.strip():
                print(f"     {line}")
    print()
    
    # Test ltrace
    print("🔍 Testing Built-in Ltrace:")
    result = tool_manager.run_tool('ltrace', ['-f', str(test_file)])
    print(f"   Status: {'✅ Success' if result['success'] else '❌ Failed'}")
    print(f"   Tool Used: {result.get('tool_used', 'unknown')}")
    if result['success']:
        lines = result['stdout'].strip().split('\n')[:6]
        for line in lines:
            if line.strip():
                print(f"     {line}")
    print()
    
    # Test valgrind
    print("🔍 Testing Built-in Valgrind:")
    result = tool_manager.run_tool('valgrind', ['--tool=memcheck', '--leak-check=full', str(test_file)])
    print(f"   Status: {'✅ Success' if result['success'] else '❌ Failed'}")
    print(f"   Tool Used: {result.get('tool_used', 'unknown')}")
    if result['success']:
        lines = result['stdout'].strip().split('\n')[:8]
        for line in lines:
            if line.strip():
                print(f"     {line}")
    print()
    
    # Test comprehensive analysis
    print("🚀 Testing Comprehensive Analysis:")
    analysis = tool_manager.get_comprehensive_analysis(test_file)
    print(f"   File Type: {analysis['file_info'].get('description', 'Unknown')}")
    print(f"   Total Strings: {analysis['strings_analysis'].get('total_strings', 0)}")
    
    # Show suspicious strings detected
    suspicious_strings = analysis['strings_analysis'].get('suspicious_strings', [])
    if suspicious_strings:
        print(f"   🚨 Suspicious Strings Detected: {len(suspicious_strings)}")
        for sus_str in suspicious_strings[:3]:
            print(f"     - {sus_str.get('string', 'N/A')} (Pattern: {sus_str.get('pattern', 'N/A')})")
    
    print(f"   Tools Used: {', '.join(analysis['tools_used'])}")
    print()
    
    # Show final tool status
    print("📋 Final Tool Status:")
    tool_status = tool_manager.get_tool_status()
    for tool, status in tool_status.items():
        icon = "🔧" if status['builtin'] else "🌐"
        print(f"   {icon} {tool:12} - {status['status']} ({status['type']})")
    
    print("\n✅ Advanced tools test completed!")
    print(f"🎯 Result: ALL 13 tools are now built-in and working!")

if __name__ == "__main__":
    test_advanced_tools()