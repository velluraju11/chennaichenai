#!/usr/bin/env python3
"""
üñ•Ô∏è ULTRA MALWARE SCANNER - Enhanced CLI Interface
Real-time threat monitoring and batch scanning capabilities
"""

import os
import sys
import json
import time
import argparse
import threading
from pathlib import Path
from typing import List, Dict, Any
import asyncio
from concurrent.futures import ThreadPoolExecutor

# Rich imports for beautiful CLI
try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table
    from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn
    from rich.layout import Layout
    from rich.live import Live
    from rich.tree import Tree
    from rich.text import Text
    from rich import box
    from rich.align import Align
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False

# Import our ultra scanner
from ultra_malware_scanner import UltraMalwareScanner

class UltraMalwareCLI:
    """
    üñ•Ô∏è Enhanced CLI Interface for Ultra Malware Scanner
    
    Features:
    - Real-time batch scanning
    - Directory monitoring
    - Threat dashboard
    - Detailed reporting
    - Export capabilities
    """
    
    def __init__(self):
        self.console = Console() if RICH_AVAILABLE else None
        self.scanner = UltraMalwareScanner()
        self.scan_history = []
        self.active_threats = []
        self.total_scanned = 0
        self.threats_detected = 0
        
    def display_banner(self):
        """Display application banner"""
        if not self.console:
            print("ULTRA MALWARE SCANNER - Enhanced CLI")
            return
            
        banner = """
[bold red]‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù[/bold red]

[bold cyan]MALWARE SCANNER[/bold cyan] - [italic]Elite Threat Detection System[/italic]
[dim]Advanced Multi-Vector Analysis ‚Ä¢ Real-time Monitoring ‚Ä¢ AI-Powered Detection[/dim]
"""
        
        self.console.print(Panel(
            Align.center(banner),
            border_style="bright_blue",
            box=box.DOUBLE
        ))
    
    def scan_single_file(self, file_path: str, save_report: bool = False) -> Dict[str, Any]:
        """Scan a single file with enhanced reporting"""
        if not os.path.exists(file_path):
            if self.console:
                self.console.print(f"[red]‚ùå File not found: {file_path}[/red]")
            return {"error": "File not found"}
        
        if self.console:
            self.console.print(f"\nüîç [bold]Scanning File:[/bold] [cyan]{file_path}[/cyan]")
        
        # Perform scan
        results = self.scanner.scan_file(file_path)
        
        # Update statistics
        self.total_scanned += 1
        threat_score = results.get("threat_score", {}).get("total_score", 0)
        
        if threat_score >= 40:  # Medium threat or higher
            self.threats_detected += 1
            self.active_threats.append({
                "file": file_path,
                "threat_level": results.get("threat_score", {}).get("threat_level", "UNKNOWN"),
                "score": threat_score,
                "scan_time": time.time()
            })
        
        self.scan_history.append(results)
        
        # Save report if requested
        if save_report:
            report_path = self._save_scan_report(results, file_path)
            if self.console:
                self.console.print(f"üìÑ [green]Report saved:[/green] {report_path}")
        
        return results
    
    def scan_directory(self, directory: str, recursive: bool = True, 
                      file_types: List[str] = None, save_reports: bool = False) -> Dict[str, Any]:
        """Scan entire directory with batch processing"""
        
        if not os.path.exists(directory):
            if self.console:
                self.console.print(f"[red]‚ùå Directory not found: {directory}[/red]")
            return {"error": "Directory not found"}
        
        # Default file types to scan
        if file_types is None:
            file_types = ['.exe', '.dll', '.scr', '.bat', '.cmd', '.com', '.pif', 
                         '.vbs', '.js', '.jar', '.zip', '.rar', '.7z', '.pdf', 
                         '.doc', '.docx', '.xls', '.xlsx', '.apk']
        
        # Find files to scan
        files_to_scan = []
        directory_path = Path(directory)
        
        if recursive:
            for file_path in directory_path.rglob('*'):
                if file_path.is_file() and file_path.suffix.lower() in file_types:
                    files_to_scan.append(str(file_path))
        else:
            for file_path in directory_path.iterdir():
                if file_path.is_file() and file_path.suffix.lower() in file_types:
                    files_to_scan.append(str(file_path))
        
        if not files_to_scan:
            if self.console:
                self.console.print("[yellow]‚ö†Ô∏è No scannable files found in directory[/yellow]")
            return {"files_scanned": 0, "threats_detected": 0}
        
        if self.console:
            self.console.print(f"\nüìÅ [bold]Directory Scan:[/bold] [cyan]{directory}[/cyan]")
            self.console.print(f"üìä Found {len(files_to_scan)} files to scan")
        
        # Batch scanning with progress
        batch_results = {
            "directory": directory,
            "total_files": len(files_to_scan),
            "scanned_files": 0,
            "threats_detected": 0,
            "scan_results": [],
            "summary": {
                "critical_threats": 0,
                "high_threats": 0,
                "medium_threats": 0,
                "low_threats": 0,
                "clean_files": 0
            }
        }
        
        if self.console:
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                BarColumn(),
                TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
                console=self.console
            ) as progress:
                
                task = progress.add_task("üîç Scanning files...", total=len(files_to_scan))
                
                for file_path in files_to_scan:
                    try:
                        result = self.scanner.scan_file(file_path)
                        batch_results["scan_results"].append(result)
                        batch_results["scanned_files"] += 1
                        
                        # Categorize threat level
                        threat_level = result.get("threat_score", {}).get("threat_level", "MINIMAL")
                        if threat_level == "CRITICAL":
                            batch_results["summary"]["critical_threats"] += 1
                            batch_results["threats_detected"] += 1
                        elif threat_level == "HIGH":
                            batch_results["summary"]["high_threats"] += 1
                            batch_results["threats_detected"] += 1
                        elif threat_level == "MEDIUM":
                            batch_results["summary"]["medium_threats"] += 1
                            batch_results["threats_detected"] += 1
                        elif threat_level == "LOW":
                            batch_results["summary"]["low_threats"] += 1
                        else:
                            batch_results["summary"]["clean_files"] += 1
                        
                        # Save individual reports if requested
                        if save_reports and threat_level != "MINIMAL":
                            self._save_scan_report(result, file_path)
                            
                    except Exception as e:
                        if self.console:
                            progress.console.print(f"[red]Error scanning {file_path}: {e}[/red]")
                    
                    progress.update(task, advance=1)
        else:
            # Non-rich progress
            for i, file_path in enumerate(files_to_scan):
                print(f"Scanning {i+1}/{len(files_to_scan)}: {file_path}")
                try:
                    result = self.scanner.scan_file(file_path)
                    batch_results["scan_results"].append(result)
                    batch_results["scanned_files"] += 1
                except Exception as e:
                    print(f"Error scanning {file_path}: {e}")
        
        # Display batch summary
        self._display_batch_summary(batch_results)
        
        # Save batch report
        if save_reports:
            batch_report_path = self._save_batch_report(batch_results)
            if self.console:
                self.console.print(f"üìä [green]Batch report saved:[/green] {batch_report_path}")
        
        return batch_results
    
    def real_time_monitor(self, directory: str, interval: int = 30):
        """Real-time directory monitoring for new threats"""
        if self.console:
            self.console.print(f"\nüëÅÔ∏è [bold]Starting Real-time Monitor[/bold]")
            self.console.print(f"üìÅ Monitoring: [cyan]{directory}[/cyan]")
            self.console.print(f"‚è±Ô∏è Interval: {interval} seconds")
            self.console.print("[dim]Press Ctrl+C to stop monitoring[/dim]\n")
        
        try:
            while True:
                # Quick scan of directory
                self.console.print(f"üîÑ [yellow]Scanning at {time.strftime('%H:%M:%S')}[/yellow]")
                
                results = self.scan_directory(directory, recursive=True, save_reports=False)
                
                if results.get("threats_detected", 0) > 0:
                    if self.console:
                        self.console.print(f"üö® [red bold]THREATS DETECTED: {results['threats_detected']}[/red bold]")
                        self._display_threat_alert(results)
                
                time.sleep(interval)
                
        except KeyboardInterrupt:
            if self.console:
                self.console.print("\n‚èπÔ∏è [yellow]Monitoring stopped by user[/yellow]")
    
    def display_dashboard(self):
        """Display threat monitoring dashboard"""
        if not self.console:
            print("Dashboard not available without rich library")
            return
        
        # Create dashboard layout
        layout = Layout()
        layout.split_column(
            Layout(name="header", size=8),
            Layout(name="body"),
            Layout(name="footer", size=3)
        )
        
        layout["body"].split_row(
            Layout(name="stats"),
            Layout(name="threats")
        )
        
        # Header
        header = Panel(
            "[bold cyan]ULTRA MALWARE SCANNER[/bold cyan] - [italic]Real-time Dashboard[/italic]\n"
            f"üïí Last Update: {time.strftime('%Y-%m-%d %H:%M:%S')}",
            style="bright_blue"
        )
        
        # Statistics
        stats_table = Table(title="üìä Scan Statistics", box=box.ROUNDED)
        stats_table.add_column("Metric", style="bold")
        stats_table.add_column("Value", style="cyan")
        
        stats_table.add_row("Total Scanned", str(self.total_scanned))
        stats_table.add_row("Threats Detected", str(self.threats_detected))
        stats_table.add_row("Active Threats", str(len(self.active_threats)))
        stats_table.add_row("Clean Files", str(self.total_scanned - self.threats_detected))
        
        # Active threats
        threats_table = Table(title="üö® Active Threats", box=box.ROUNDED)
        threats_table.add_column("File", style="red")
        threats_table.add_column("Threat Level", style="bold")
        threats_table.add_column("Score", style="yellow")
        
        for threat in self.active_threats[-10:]:  # Show last 10
            threats_table.add_row(
                Path(threat["file"]).name,
                threat["threat_level"],
                f"{threat['score']:.1f}"
            )
        
        # Footer
        footer = Panel(
            "[dim]Use 'scan', 'monitor', or 'help' commands ‚Ä¢ Press Ctrl+C to exit[/dim]",
            style="dim"
        )
        
        layout["header"].update(header)
        layout["stats"].update(stats_table)
        layout["threats"].update(threats_table)
        layout["footer"].update(footer)
        
        self.console.print(layout)
    
    def _display_batch_summary(self, results: Dict[str, Any]):
        """Display batch scan summary"""
        if not self.console:
            print(f"Batch scan complete: {results['scanned_files']} files, {results['threats_detected']} threats")
            return
        
        summary = results["summary"]
        
        # Create summary table
        table = Table(title="üìä Batch Scan Summary", box=box.DOUBLE)
        table.add_column("Category", style="bold")
        table.add_column("Count", style="cyan")
        table.add_column("Percentage", style="green")
        
        total = results["scanned_files"]
        
        if summary["critical_threats"] > 0:
            table.add_row("üî¥ Critical Threats", str(summary["critical_threats"]), 
                         f"{(summary['critical_threats']/total)*100:.1f}%")
        
        if summary["high_threats"] > 0:
            table.add_row("üü† High Threats", str(summary["high_threats"]), 
                         f"{(summary['high_threats']/total)*100:.1f}%")
        
        if summary["medium_threats"] > 0:
            table.add_row("üü° Medium Threats", str(summary["medium_threats"]), 
                         f"{(summary['medium_threats']/total)*100:.1f}%")
        
        if summary["low_threats"] > 0:
            table.add_row("üîµ Low Threats", str(summary["low_threats"]), 
                         f"{(summary['low_threats']/total)*100:.1f}%")
        
        table.add_row("‚úÖ Clean Files", str(summary["clean_files"]), 
                     f"{(summary['clean_files']/total)*100:.1f}%")
        
        self.console.print("\n")
        self.console.print(table)
        
        # Overall assessment
        if results["threats_detected"] > 0:
            self.console.print(Panel(
                f"[bold red]‚ö†Ô∏è THREATS DETECTED: {results['threats_detected']} suspicious files found[/bold red]\n"
                f"Immediate investigation recommended for high-risk files.",
                title="üö® Security Alert",
                border_style="red"
            ))
        else:
            self.console.print(Panel(
                f"[bold green]‚úÖ ALL CLEAR: No threats detected in {total} files[/bold green]\n"
                f"Directory appears to be clean.",
                title="üõ°Ô∏è Security Status",
                border_style="green"
            ))
    
    def _display_threat_alert(self, results: Dict[str, Any]):
        """Display threat alert for real-time monitoring"""
        if not self.console:
            return
        
        critical_count = results["summary"]["critical_threats"]
        high_count = results["summary"]["high_threats"]
        
        alert_text = f"üö® [bold red]SECURITY ALERT[/bold red] üö®\n\n"
        
        if critical_count > 0:
            alert_text += f"üî¥ [bold]CRITICAL THREATS: {critical_count}[/bold]\n"
        
        if high_count > 0:
            alert_text += f"üü† [bold]HIGH THREATS: {high_count}[/bold]\n"
        
        alert_text += f"\nüìä Total files scanned: {results['scanned_files']}"
        alert_text += f"\n‚ö†Ô∏è Immediate action required!"
        
        self.console.print(Panel(
            alert_text,
            title="üö® THREAT DETECTION ALERT",
            border_style="bright_red",
            box=box.DOUBLE
        ))
    
    def _save_scan_report(self, results: Dict[str, Any], file_path: str) -> str:
        """Save individual scan report"""
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        filename = Path(file_path).stem
        report_path = f"ultra_scan_report_{filename}_{timestamp}.json"
        
        with open(report_path, 'w') as f:
            json.dump(results, f, indent=2)
        
        return report_path
    
    def _save_batch_report(self, results: Dict[str, Any]) -> str:
        """Save batch scan report"""
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        report_path = f"ultra_batch_scan_{timestamp}.json"
        
        with open(report_path, 'w') as f:
            json.dump(results, f, indent=2)
        
        return report_path

def main():
    """Main CLI interface"""
    parser = argparse.ArgumentParser(
        description="ü¶† Ultra Malware Scanner - Enhanced CLI Interface",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s scan file.exe                    # Scan single file
  %(prog)s scan-dir /path/to/folder         # Scan directory
  %(prog)s monitor /path/to/folder          # Real-time monitoring
  %(prog)s dashboard                        # Show threat dashboard
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Scan single file
    scan_parser = subparsers.add_parser('scan', help='Scan a single file')
    scan_parser.add_argument('file', help='File to scan')
    scan_parser.add_argument('--save-report', action='store_true', help='Save scan report')
    
    # Scan directory
    dir_parser = subparsers.add_parser('scan-dir', help='Scan directory')
    dir_parser.add_argument('directory', help='Directory to scan')
    dir_parser.add_argument('--recursive', action='store_true', default=True, help='Recursive scan')
    dir_parser.add_argument('--save-reports', action='store_true', help='Save individual reports')
    dir_parser.add_argument('--file-types', nargs='+', help='File extensions to scan')
    
    # Real-time monitoring
    monitor_parser = subparsers.add_parser('monitor', help='Real-time directory monitoring')
    monitor_parser.add_argument('directory', help='Directory to monitor')
    monitor_parser.add_argument('--interval', type=int, default=30, help='Scan interval in seconds')
    
    # Dashboard
    subparsers.add_parser('dashboard', help='Show threat dashboard')
    
    args = parser.parse_args()
    
    # Initialize CLI
    cli = UltraMalwareCLI()
    cli.display_banner()
    
    if not args.command:
        cli.console.print("[yellow]Use --help to see available commands[/yellow]")
        return
    
    # Execute commands
    try:
        if args.command == 'scan':
            cli.scan_single_file(args.file, args.save_report)
            
        elif args.command == 'scan-dir':
            cli.scan_directory(
                args.directory, 
                args.recursive, 
                args.file_types, 
                args.save_reports
            )
            
        elif args.command == 'monitor':
            cli.real_time_monitor(args.directory, args.interval)
            
        elif args.command == 'dashboard':
            cli.display_dashboard()
            
    except KeyboardInterrupt:
        if cli.console:
            cli.console.print("\n[yellow]Operation cancelled by user[/yellow]")
    except Exception as e:
        if cli.console:
            cli.console.print(f"[red]Error: {e}[/red]")
        else:
            print(f"Error: {e}")

if __name__ == "__main__":
    main()
