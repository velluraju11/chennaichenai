#!/usr/bin/env python3
"""
Setup script for Complete Reverse Engineering Analyzer
"""

import subprocess
import sys
import os

def install_requirements():
    """Install Python requirements"""
    try:
        print("[+] Installing Python requirements...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("[+] Python requirements installed successfully")
    except subprocess.CalledProcessError as e:
        print(f"[-] Failed to install requirements: {e}")
        return False
    return True

def check_system_tools():
    """Check if required system tools are available"""
    tools = ["strings", "hexdump", "file", "binwalk", "objdump", "readelf"]
    missing_tools = []
    
    for tool in tools:
        try:
            subprocess.run([tool, "--version"], capture_output=True, timeout=5)
            print(f"[+] {tool} is available")
        except (subprocess.TimeoutExpired, FileNotFoundError):
            print(f"[-] {tool} is not available")
            missing_tools.append(tool)
    
    if missing_tools:
        print(f"\n[-] Missing tools: {', '.join(missing_tools)}")
        print("[!] Install missing tools using your package manager:")
        print("    Ubuntu/Debian: sudo apt-get install binutils binwalk file")
        print("    CentOS/RHEL: sudo yum install binutils binwalk file")
        print("    macOS: brew install binutils binwalk file")
        return False
    
    return True

def create_directories():
    """Create necessary directories"""
    dirs = ["test_analysis", "reports"]
    for dir_name in dirs:
        os.makedirs(dir_name, exist_ok=True)
        print(f"[+] Created directory: {dir_name}")

def main():
    print("Complete Reverse Engineering Analyzer Setup")
    print("=" * 50)
    
    # Install Python requirements
    if not install_requirements():
        sys.exit(1)
    
    # Check system tools
    if not check_system_tools():
        print("\n[!] Some tools are missing. The analyzer may not work properly.")
        response = input("Continue anyway? (y/N): ")
        if response.lower() != 'y':
            sys.exit(1)
    
    # Create directories
    create_directories()
    
    print("\n[+] Setup complete!")
    print("\nUsage examples:")
    print("  python complete_reverse_analyzer.py /path/to/file")
    print("  python complete_reverse_analyzer.py /path/to/file --gemini-key YOUR_API_KEY")
    print("  python complete_reverse_analyzer.py /path/to/file --output-dir custom_reports")

if __name__ == "__main__":
    main()