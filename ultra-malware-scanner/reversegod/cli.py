#!/usr/bin/env python3
"""
ReverseGod (RG) - Weaponized Gemini-powered binary detection, analysis, and auto-reporting framework
Main CLI interface
"""

import typer
import sys
from pathlib import Path
from typing import Optional
from enum import Enum

from core.file_recon import FileRecon
from core.disassembler import Disassembler
from core.debugger import Debugger
from core.patcher import Patcher
from core.gemini_ai_core import GeminiAICore
from core.report_engine import ReportEngine
from utils.config_loader import ConfigLoader
from utils.tool_runner import ToolRunner

app = typer.Typer(
    name="reversegod",
    help="ReverseGod (RG) - Weaponized Gemini-powered binary detection, analysis, and auto-reporting framework"
)

class ReportFormat(str, Enum):
    json = "json"
    html = "html"
    markdown = "markdown"

class RiskLevel(str, Enum):
    low = "LOW"
    moderate = "MODERATE"
    high = "HIGH"
    critical = "CRITICAL"

@app.command()
def analyze(
    binary_path: Path = typer.Argument(..., help="Path to binary file to analyze"),
    full: bool = typer.Option(False, "--full", help="Run complete analysis pipeline"),
    report: ReportFormat = typer.Option(ReportFormat.markdown, "--report", help="Report format"),
    output_dir: Optional[Path] = typer.Option(None, "--output", help="Output directory for reports"),
    isolate: bool = typer.Option(False, "--isolate", help="Run analysis in isolated environment"),
    gemini_api_key: Optional[str] = typer.Option(None, "--gemini-key", help="Gemini API key for AI analysis")
):
    """Run comprehensive binary analysis"""
    typer.echo(f"üöÄ ReverseGod Analysis Starting...")
    typer.echo(f"üìÅ Target: {binary_path}")
    
    if not binary_path.exists():
        typer.echo(f"‚ùå Error: Binary file not found: {binary_path}", err=True)
        raise typer.Exit(1)
    
    # Initialize components
    config = ConfigLoader()
    tool_runner = ToolRunner(isolate=isolate)
    
    # Create output directory
    if not output_dir:
        output_dir = Path("reports") / binary_path.stem
    output_dir.mkdir(parents=True, exist_ok=True)
    
    analysis_results = {}
    
    try:
        # Phase 1: File Reconnaissance
        typer.echo("üîç Phase 1: File Reconnaissance...")
        file_recon = FileRecon(tool_runner)
        analysis_results["file_recon"] = file_recon.analyze(binary_path)
        
        if full:
            # Phase 2: Disassembly
            typer.echo("üß™ Phase 2: Disassembly & Decompilation...")
            disassembler = Disassembler(tool_runner)
            analysis_results["disassembly"] = disassembler.analyze(binary_path)
            
            # Phase 3: Dynamic Analysis
            typer.echo("üß† Phase 3: Dynamic Analysis & Debugging...")
            debugger = Debugger(tool_runner)
            analysis_results["debugging"] = debugger.analyze(binary_path)
            
            # Phase 4: Binary Modification Analysis
            typer.echo("üõ†Ô∏è Phase 4: Binary Modification Analysis...")
            patcher = Patcher(tool_runner)
            analysis_results["patching"] = patcher.analyze(binary_path)
        
        # Phase 5: AI Analysis (if API key provided)
        if gemini_api_key:
            typer.echo("üß† Phase 5: AI-Powered Analysis...")
            gemini_ai = GeminiAICore(gemini_api_key)
            analysis_results["ai_analysis"] = gemini_ai.analyze(analysis_results)
        
        # Phase 6: Report Generation
        typer.echo("üìä Phase 6: Report Generation...")
        report_engine = ReportEngine()
        report_path = report_engine.generate_report(
            analysis_results, 
            binary_path, 
            output_dir, 
            report
        )
        
        typer.echo(f"‚úÖ Analysis Complete!")
        typer.echo(f"üìÑ Report saved to: {report_path}")
        
    except Exception as e:
        typer.echo(f"‚ùå Analysis failed: {str(e)}", err=True)
        raise typer.Exit(1)

@app.command()
def recon(
    binary_path: Path = typer.Argument(..., help="Path to binary file"),
    output: Optional[Path] = typer.Option(None, "--output", help="Output file for results")
):
    """Run quick file reconnaissance only"""
    typer.echo(f"üîç Quick Reconnaissance: {binary_path}")
    
    if not binary_path.exists():
        typer.echo(f"‚ùå Error: Binary file not found: {binary_path}", err=True)
        raise typer.Exit(1)
    
    try:
        tool_runner = ToolRunner()
        file_recon = FileRecon(tool_runner)
        results = file_recon.analyze(binary_path)
        
        if output:
            import json
            with open(output, 'w') as f:
                json.dump(results, f, indent=2)
            typer.echo(f"üìÑ Results saved to: {output}")
        else:
            # Print summary to terminal
            typer.echo(f"üìã File Type: {results.get('file_type', 'Unknown')}")
            typer.echo(f"üî¢ MD5: {results.get('md5', 'N/A')}")
            typer.echo(f"üî¢ SHA256: {results.get('sha256', 'N/A')}")
            typer.echo(f"üìè Size: {results.get('size', 'N/A')} bytes")
            
    except Exception as e:
        typer.echo(f"‚ùå Reconnaissance failed: {str(e)}", err=True)
        raise typer.Exit(1)

@app.command()
def report(
    analysis_file: Path = typer.Argument(..., help="Path to analysis JSON file"),
    format: ReportFormat = typer.Option(ReportFormat.html, "--format", help="Report format"),
    output: Optional[Path] = typer.Option(None, "--output", help="Output file path")
):
    """Generate report from existing analysis data"""
    typer.echo(f"üìä Generating report from: {analysis_file}")
    
    if not analysis_file.exists():
        typer.echo(f"‚ùå Error: Analysis file not found: {analysis_file}", err=True)
        raise typer.Exit(1)
    
    try:
        import json
        with open(analysis_file, 'r') as f:
            analysis_results = json.load(f)
        
        report_engine = ReportEngine()
        output_dir = output.parent if output else Path("reports")
        output_dir.mkdir(parents=True, exist_ok=True)
        
        report_path = report_engine.generate_report(
            analysis_results,
            Path(analysis_results.get('binary_path', 'unknown')),
            output_dir,
            format
        )
        
        typer.echo(f"‚úÖ Report generated: {report_path}")
        
    except Exception as e:
        typer.echo(f"‚ùå Report generation failed: {str(e)}", err=True)
        raise typer.Exit(1)

@app.command()
def version():
    """Show ReverseGod version"""
    typer.echo("ReverseGod (RG) v1.0.0")
    typer.echo("Weaponized Gemini-powered binary detection, analysis, and auto-reporting framework")

if __name__ == "__main__":
    app()