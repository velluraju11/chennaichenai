#!/usr/bin/env python3
"""
Test suspicious content detection in the sample file
"""

import sys
from pathlib import Path

# Add reversegod to path
sys.path.insert(0, str(Path(__file__).parent / "reversegod"))

from tools.rg_strings import RGStrings
from tools.rg_ltrace import RGLtrace
from tools.rg_valgrind import RGValgrind

def test_suspicious_detection():
    """Test detection of suspicious content"""
    print("ðŸš¨ Testing Suspicious Content Detection")
    print("=" * 50)
    
    test_file = Path("test_sample.txt")
    
    # Test string analysis
    print("ðŸ”¤ String Analysis:")
    strings_tool = RGStrings()
    result = strings_tool.analyze_strings(test_file)
    print(f"   Total strings: {result['total_strings']}")
    print(f"   Suspicious strings: {len(result['suspicious_strings'])}")
    
    for sus in result['suspicious_strings']:
        print(f"     - Pattern: {sus['pattern']}")
        print(f"       String: {sus['string'][:60]}...")
    print()
    
    # Test ltrace analysis
    print("ðŸ“š Library Call Analysis:")
    ltrace_tool = RGLtrace()
    result = ltrace_tool.trace_library_calls(test_file)
    
    suspicious_apis = result['api_usage']['suspicious_apis']
    print(f"   Suspicious APIs detected: {len(suspicious_apis)}")
    for api in suspicious_apis:
        print(f"     - {api['name']}: {api['reason']}")
    
    windows_apis = result['api_usage']['windows_api']
    print(f"   Windows APIs detected: {len(windows_apis)}")
    for api in windows_apis[:3]:  # Show first 3
        print(f"     - {api}")
    print()
    
    # Test memory analysis
    print("ðŸ§  Memory Analysis:")
    valgrind_tool = RGValgrind()
    result = valgrind_tool.analyze_memory(test_file)
    
    memory_errors = result['memory_errors']
    print(f"   Memory errors detected: {len(memory_errors)}")
    for error in memory_errors:
        print(f"     - {error['type']}: {error['description']}")
    
    buffer_overflows = result['buffer_overflows']
    print(f"   Buffer overflow risks: {len(buffer_overflows)}")
    for overflow in buffer_overflows:
        print(f"     - {overflow['function']}: {overflow['reason']}")
    print()
    
    print("âœ… Suspicious content detection test completed!")
    print("ðŸŽ¯ The built-in tools successfully detected malicious patterns!")

if __name__ == "__main__":
    test_suspicious_detection()