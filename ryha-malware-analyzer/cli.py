import typer
from rich.console import Console
from rich.table import Table
from rich import print
from core.static_analyzer import run_static_analysis
from core.dynamic_runner import run_dynamic_analysis
from core.memory_analyzer import run_memory_analysis
from core.network_analyzer import run_network_analysis
from core.unpacker import run_unpacking
from core.ioc_scanner import run_ioc_scan
from core.dropper import detect_dropped_files
from core.reporter import generate_report, save_report
from core.auto_chain import run_full_pipeline

console = Console()
app = typer.Typer(help=">>> Ryha Malware Analyzer (RMA) - Unified CLI for malware analysis")

def display_results_table(results, title="Analysis Results"):
    """Display results in a formatted table"""
    table = Table(title=title)
    table.add_column("Module", style="cyan")
    table.add_column("Status", style="green") 
    table.add_column("Key Findings", style="yellow")
    
    for module, data in results.items():
        if isinstance(data, dict):
            if "error" in data:
                status = "[X] Error"
                findings = data["error"]
            else:
                status = "[OK] Complete"
                # Extract key findings
                if module == "static":
                    findings = f"Type: {data.get('file_type', 'Unknown')}, Hash: {data.get('hashes', {}).get('sha256', 'N/A')[:16]}..."
                elif module == "ioc":
                    findings = f"VT: {data.get('reputation', 'Unknown')}, Family: {data.get('malware_family', 'Unknown')}"
                elif module == "unpacker":
                    assessment = data.get('assessment', {})
                    findings = f"Packed: {assessment.get('likely_packed', False)}, Confidence: {assessment.get('confidence', 'Unknown')}"
                else:
                    findings = str(data)[:50] + "..." if len(str(data)) > 50 else str(data)
        else:
            status = "[OK] Complete"
            findings = str(data)[:50] + "..." if len(str(data)) > 50 else str(data)
        
        table.add_row(module.title(), status, findings)
    
    console.print(table)

@app.command()
def scan(file: str, static: bool = False, ioc: bool = False, save: bool = False):
    """Scan a file with static or IOC analysis."""
    console.print(f"[bold green]>>> Scanning:[/bold green] {file}")
    
    results = {}
    
    if static:
        console.print("Running static analysis...")
        results["static"] = run_static_analysis(file, "data/yara_rules/basic_rules.yar")
        
    if ioc:
        console.print("Running IOC scan...")
        results["ioc"] = run_ioc_scan(file)
    
    if not static and not ioc:
        console.print("No analysis type specified. Use --static or --ioc")
        return
        
    display_results_table(results, "Scan Results")
    
    if save:
        report_data = generate_report(results, "json")
        filepath = save_report(report_data, "json")
        console.print(f"[green]Report saved to: {filepath}[/green]")

@app.command()
def analyze(file: str, full: bool = False, report: str = "json", save: bool = True): 
    """Run full chain analysis and generate report."""
    console.print(f"[bold blue]>>> Analyzing:[/bold blue] {file}")
    
    if not full:
        console.print("Use --full for complete analysis pipeline")
        return
        
    console.print("Running full analysis pipeline...")
    
    with console.status("[bold green]Processing...") as status:
        results = {}
        
        status.update("Static analysis...")
        results["static"] = run_static_analysis(file, "data/yara_rules/basic_rules.yar")
        
        status.update("IOC scanning...")
        results["ioc"] = run_ioc_scan(file)
        
        status.update("Unpacking analysis...")
        results["unpacker"] = run_unpacking(file)
        
        status.update("Dynamic analysis...")
        results["dynamic"] = run_dynamic_analysis(file)
        
        status.update("Memory analysis...")
        results["memory"] = run_memory_analysis(file)
        
        status.update("Network analysis...")
        results["network"] = run_network_analysis(file)
        
        status.update("Dropper detection...")
        results["dropper"] = detect_dropped_files("logs/")
    
    display_results_table(results, "Full Analysis Results")
    
    # Generate and display report
    report_data = generate_report(results, format=report)
    
    if save:
        filepath = save_report(report_data, report)
        console.print(f"[green]>>> Report saved to: {filepath}[/green]")
    else:
        if report == "json":
            console.print("[bold]JSON Report:[/bold]")
            console.print(report_data)
        elif report == "markdown":
            console.print("[bold]Markdown Report:[/bold]")
            console.print(report_data)

@app.command()
def report(file: str, format: str = "json", save: bool = True):
    """Generate report for a file."""
    console.print(f"[bold yellow]>>> Generating report for:[/bold yellow] {file}")
    
    # Run basic analysis for reporting
    results = {
        "static": run_static_analysis(file, "data/yara_rules/basic_rules.yar"),
        "ioc": run_ioc_scan(file),
        "unpacker": run_unpacking(file)
    }
    
    report_data = generate_report(results, format=format)
    
    if save:
        filepath = save_report(report_data, format)
        console.print(f"[green]Report saved to: {filepath}[/green]")
    else:
        console.print(report_data)

@app.command()
def memory(analyze: bool = False, file: str = ""):
    """Analyze memory dump."""
    if analyze and file:
        print(f"[bold magenta]Memory analysis:[/bold magenta] {file}")
        results = run_memory_analysis(file)
        print(results)

@app.command()
def net(file: str, zeek: bool = False):
    """Analyze network PCAP."""
    print(f"[bold cyan]Network analysis:[/bold cyan] {file}")
    if zeek:
        print("Running Zeek analysis...")
        results = run_network_analysis(file)
        print(results)

@app.command()
def ioc(scan: bool = False, upload: str = ""):
    """Scan IOCs or upload to VT."""
    if scan:
        print("Scanning IOCs...")
        results = run_ioc_scan(upload)
        print(results)
    if upload:
        print(f"Uploading to {upload}...")
        # ... call VT API ...

if __name__ == "__main__":
    app()

@app.command()
def analyze(file: str, full: bool = False, report: str = ""): 
    """Run full chain analysis and generate report."""
    print(f"[bold blue]Analyzing:[/bold blue] {file}")
    if full:
        print("Running full pipeline...")
        # ... call auto_chain ...
    if report:
        print(f"Generating report in {report} format...")
        # ... call reporter ...

@app.command()
def report(file: str, format: str = "json"):
    """Generate report for a file."""
    print(f"[bold yellow]Reporting:[/bold yellow] {file} as {format}")
    # ... call reporter ...

@app.command()
def memory(analyze: bool = False, file: str = ""):
    """Analyze memory dump."""
    if analyze and file:
        print(f"[bold magenta]Memory analysis:[/bold magenta] {file}")
        # ... call memory_analyzer ...

@app.command()
def net(file: str, zeek: bool = False):
    """Analyze network PCAP."""
    print(f"[bold cyan]Network analysis:[/bold cyan] {file}")
    if zeek:
        print("Running Zeek analysis...")
        # ... call network_analyzer ...

@app.command()
def ioc(scan: bool = False, upload: str = ""):
    """Scan IOCs or upload to VT."""
    if scan:
        print("Scanning IOCs...")
        # ... call ioc_scanner ...
    if upload:
        print(f"Uploading to {upload}...")
        # ... call VT API ...

if __name__ == "__main__":
    app()
