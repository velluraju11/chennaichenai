# ioc_scanner.py
"""IOC scanning: VirusTotal, AbuseIPDB, ThreatIntel APIs"""

import requests
import hashlib
import os
import time

class IOCScanner:
    def __init__(self):
        self.vt_api_key = os.getenv('VT_API_KEY')
        self.abuseipdb_api_key = os.getenv('ABUSEIPDB_API_KEY')
        
    def get_file_hash(self, file_path):
        """Get SHA256 hash of file"""
        try:
            with open(file_path, 'rb') as f:
                return hashlib.sha256(f.read()).hexdigest()
        except Exception as e:
            return None
    
    def scan_virustotal(self, file_hash):
        """Scan hash on VirusTotal"""
        if not self.vt_api_key:
            return {"error": "VT_API_KEY not set in environment"}
        
        try:
            url = f"https://www.virustotal.com/vtapi/v2/file/report"
            params = {
                'apikey': self.vt_api_key,
                'resource': file_hash
            }
            response = requests.get(url, params=params, timeout=30)
            if response.status_code == 200:
                data = response.json()
                return {
                    "scan_date": data.get("scan_date"),
                    "positives": data.get("positives", 0),
                    "total": data.get("total", 0),
                    "permalink": data.get("permalink"),
                    "vendors": list(data.get("scans", {}).keys())[:10] if data.get("scans") else []
                }
            else:
                return {"error": f"VT API error: {response.status_code}"}
        except Exception as e:
            return {"error": f"VT scan failed: {e}"}
    
    def scan_abuseipdb(self, ip_address):
        """Check IP reputation on AbuseIPDB"""
        if not self.abuseipdb_api_key:
            return {"error": "ABUSEIPDB_API_KEY not set in environment"}
        
        try:
            url = "https://api.abuseipdb.com/api/v2/check"
            headers = {
                'Key': self.abuseipdb_api_key,
                'Accept': 'application/json'
            }
            params = {
                'ipAddress': ip_address,
                'maxAgeInDays': 90,
                'verbose': ''
            }
            response = requests.get(url, headers=headers, params=params, timeout=30)
            if response.status_code == 200:
                data = response.json()
                return {
                    "abuse_confidence": data.get("data", {}).get("abuseConfidencePercentage", 0),
                    "is_public": data.get("data", {}).get("isPublic", False),
                    "country_code": data.get("data", {}).get("countryCode"),
                    "usage_type": data.get("data", {}).get("usageType")
                }
            else:
                return {"error": f"AbuseIPDB API error: {response.status_code}"}
        except Exception as e:
            return {"error": f"AbuseIPDB scan failed: {e}"}
    
    def check_malware_families(self, file_hash):
        """Check against known malware families (simulated)"""
        # This would integrate with ThreatFox, MISP, etc.
        known_families = {
            "d41d8cd98f00b204e9800998ecf8427e": "Empty file",
            # Add more known hashes here
        }
        return known_families.get(file_hash, "Unknown")

def run_ioc_scan(file_path):
    """Run IOC scanning on file"""
    scanner = IOCScanner()
    
    if not os.path.exists(file_path):
        return {"error": f"File not found: {file_path}"}
    
    file_hash = scanner.get_file_hash(file_path)
    if not file_hash:
        return {"error": "Could not calculate file hash"}
    
    results = {
        "file_hash": file_hash,
        "virustotal": scanner.scan_virustotal(file_hash),
        "malware_family": scanner.check_malware_families(file_hash),
        "reputation": "Clean" if file_hash != "d41d8cd98f00b204e9800998ecf8427e" else "Empty file"
    }
    
    # Simulate IP scanning if we find IPs in the file
    results["ip_reputation"] = {
        "scanned_ips": [],
        "note": "IP extraction and scanning would be implemented here"
    }
    
    return results
