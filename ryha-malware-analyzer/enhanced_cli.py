#!/usr/bin/env python3
"""
Enhanced Command Line Interface for Ultra Advanced RYHA Malware Analyzer
Real-time threat intelligence and comprehensive forensic analysis
"""

import typer
import asyncio
import threading
import time
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn
from rich.live import Live
from rich import print as rprint
from rich.layout import Layout
from rich.columns import Columns
from typing import Dict, List, Any, Optional
from datetime import datetime
import json
import os
import sys

# Import our enhanced modules
try:
    from ultra_advanced_analyzer import UltraAdvancedAnalyzer
    from core.threat_intelligence import ThreatIntelligenceEngine, HackerLocationTracker
    from core.network_forensics import AdvancedNetworkForensics
except ImportError as e:
    rprint(f"[red]Import error: {e}[/red]")
    rprint("[yellow]Make sure all required modules are in the correct directory[/yellow]")
    sys.exit(1)

console = Console()
app = typer.Typer(help="🛡️ RYHA Ultra Advanced Malware Analyzer - Elite Threat Intelligence Platform")

class RealTimeAnalysisDashboard:
    """Real-time analysis dashboard with live updates"""
    
    def __init__(self):
        self.console = Console()
        self.analysis_results = {}
        self.is_running = False
        self.threat_intel_engine = ThreatIntelligenceEngine()
        self.location_tracker = HackerLocationTracker()
        self.network_forensics = AdvancedNetworkForensics()
        
    def create_dashboard_layout(self) -> Layout:
        """Create the dashboard layout"""
        layout = Layout()
        
        layout.split_column(
            Layout(name="header", size=3),
            Layout(name="main", ratio=1),
            Layout(name="footer", size=3)
        )
        
        layout["main"].split_row(
            Layout(name="left"),
            Layout(name="center"),
            Layout(name="right")
        )
        
        return layout
        
    def update_header(self, layout: Layout):
        """Update header with system status"""
        header_text = """
🛡️  RYHA ULTRA ADVANCED ANALYZER - REAL-TIME THREAT INTELLIGENCE 🛡️
        """
        layout["header"].update(Panel(header_text, style="bold green"))
        
    def update_threat_intelligence_panel(self, layout: Layout, results: Dict[str, Any]):
        """Update threat intelligence panel"""
        attribution = results.get('attribution', {})
        primary_suspects = attribution.get('primary_suspects', [])
        confidence_scores = attribution.get('confidence_scores', {})
        
        # Create threat intelligence table
        threat_table = Table(title="🎯 Threat Actor Attribution", show_header=True, header_style="bold red")
        threat_table.add_column("Threat Actor", style="cyan")
        threat_table.add_column("Confidence", style="yellow")
        threat_table.add_column("Country", style="green")
        threat_table.add_column("Motivation", style="magenta")
        
        for actor in primary_suspects[:5]:  # Top 5 suspects
            confidence = confidence_scores.get(actor, 0.0)
            # Get actor info from threat intelligence
            actor_info = self.threat_intel_engine.threat_actors_db.get(actor, {})
            country = actor_info.get('country', 'Unknown')
            motivation = ', '.join(actor_info.get('motivation', ['Unknown']))
            
            threat_table.add_row(
                actor,
                f"{confidence:.2f}",
                country,
                motivation
            )
            
        layout["left"].update(Panel(threat_table, title="Threat Intelligence"))
        
    def update_network_analysis_panel(self, layout: Layout, results: Dict[str, Any]):
        """Update network analysis panel"""
        network_analysis = results.get('network_analysis', {})
        c2_communications = network_analysis.get('c2_communications', [])
        suspicious_connections = network_analysis.get('suspicious_connections', [])
        
        # Create network analysis table
        network_table = Table(title="🌐 Network Forensics", show_header=True, header_style="bold blue")
        network_table.add_column("Type", style="cyan")
        network_table.add_column("Source", style="yellow")
        network_table.add_column("Destination", style="green")
        network_table.add_column("Threat Level", style="red")
        
        # Add C2 communications
        for c2 in c2_communications[:3]:
            network_table.add_row(
                "C2 Communication",
                c2.get('src_ip', 'Unknown'),
                c2.get('dst_ip', 'Unknown'),
                "Critical"
            )
            
        # Add suspicious connections
        for conn in suspicious_connections[:3]:
            network_table.add_row(
                conn.get('type', 'Unknown'),
                conn.get('src_ip', 'Unknown'), 
                conn.get('dst_ip', 'Unknown'),
                "High"
            )
            
        layout["center"].update(Panel(network_table, title="Network Analysis"))
        
    def update_geolocation_panel(self, layout: Layout, results: Dict[str, Any]):
        """Update geolocation tracking panel"""
        attribution = results.get('attribution', {})
        geolocation_intel = attribution.get('geolocation_intelligence', {})
        source_countries = geolocation_intel.get('source_countries', {})
        
        # Create geolocation table
        geo_table = Table(title="🗺️ Hacker Geolocation", show_header=True, header_style="bold magenta")
        geo_table.add_column("Country", style="cyan")
        geo_table.add_column("Connections", style="yellow")
        geo_table.add_column("Risk Level", style="red")
        
        for country, count in sorted(source_countries.items(), key=lambda x: x[1], reverse=True)[:5]:
            risk_level = "Critical" if country in ["Russia", "China", "North Korea", "Iran"] else "Medium"
            geo_table.add_row(country, str(count), risk_level)
            
        layout["right"].update(Panel(geo_table, title="Geolocation Intelligence"))
        
    def update_footer(self, layout: Layout):
        """Update footer with system stats"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        footer_text = f"🕐 Last Update: {timestamp} | 🚀 Status: Active | 📊 Real-time Analysis: ON"
        layout["footer"].update(Panel(footer_text, style="bold blue"))

@app.command()
def ultra_scan(
    file_path: str = typer.Argument(..., help="Path to the malware sample to analyze"),
    pcap_file: Optional[str] = typer.Option(None, "--pcap", "-p", help="Network capture file for traffic analysis"),
    output_dir: str = typer.Option("./reports", "--output", "-o", help="Output directory for reports"),
    real_time: bool = typer.Option(False, "--real-time", "-r", help="Enable real-time analysis dashboard"),
    deep_scan: bool = typer.Option(True, "--deep", "-d", help="Enable deep forensic analysis"),
    attribution: bool = typer.Option(True, "--attribution", "-a", help="Enable threat actor attribution"),
    network_forensics: bool = typer.Option(True, "--network", "-n", help="Enable network forensics")
):
    """🚀 Ultra Advanced Malware Analysis with Real-time Threat Intelligence"""
    
    # Display banner
    banner = """
    ╔══════════════════════════════════════════════════════════════════════════════╗
    ║                    🛡️  RYHA ULTRA ADVANCED ANALYZER 🛡️                      ║
    ║                                                                              ║
    ║    🔥 Elite Threat Intelligence & Attribution Analysis                      ║
    ║    🌍 Advanced Geolocation Tracking & Hacker Attribution                   ║
    ║    🎯 APT Group Detection & Campaign Correlation                            ║
    ║    🔍 Comprehensive IOC Extraction & YARA Detection                        ║
    ║    📊 Real-time Network Traffic Analysis & C2 Detection                    ║
    ║    🕵️ End-level Forensic Analysis & Evidence Collection                     ║
    ║                                                                              ║
    ╚══════════════════════════════════════════════════════════════════════════════╝
    """
    console.print(Panel(banner, style="bold green"))
    
    # Validate input file
    if not os.path.exists(file_path):
        rprint(f"[red]❌ File not found: {file_path}[/red]")
        raise typer.Exit(1)
        
    # Create output directory
    os.makedirs(output_dir, exist_ok=True)
    
    # Initialize analyzer
    with console.status("[bold green]Initializing Ultra Advanced Analyzer...") as status:
        analyzer = UltraAdvancedAnalyzer()
        threat_intel = ThreatIntelligenceEngine()
        location_tracker = HackerLocationTracker()
        network_forensics = AdvancedNetworkForensics()
        
        status.update("[bold green]✅ All systems initialized")
        time.sleep(1)
    
    # Start analysis with progress tracking
    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        console=console
    ) as progress:
        
        # Phase 1: Core malware analysis
        task1 = progress.add_task("🔍 Performing ultra advanced file analysis...", total=100)
        analysis_results = analyzer.analyze_file_advanced(file_path)
        progress.update(task1, advance=100)
        
        # Phase 2: Threat intelligence attribution
        if attribution:
            task2 = progress.add_task("🎯 Analyzing threat actor attribution...", total=100)
            attribution_results = threat_intel.analyze_threat_attribution(analysis_results)
            analysis_results['attribution'] = attribution_results
            progress.update(task2, advance=100)
        
        # Phase 3: Network forensics
        if network_forensics and pcap_file:
            task3 = progress.add_task("🌐 Performing network forensics analysis...", total=100)
            network_results = network_forensics.analyze_network_traffic(pcap_file=pcap_file)
            analysis_results['network_analysis'] = network_results
            progress.update(task3, advance=100)
        
        # Phase 4: Geolocation tracking
        task4 = progress.add_task("🗺️ Tracking hacker locations...", total=100)
        if 'network_analysis' in analysis_results:
            location_results = location_tracker.track_hacker_location(analysis_results['network_analysis'])
            analysis_results['geolocation_tracking'] = location_results
        progress.update(task4, advance=100)
        
        # Phase 5: Deep forensic analysis
        if deep_scan:
            task5 = progress.add_task("🕵️ Performing deep forensic analysis...", total=100)
            # Additional deep analysis would go here
            progress.update(task5, advance=100)
    
    # Display results
    if real_time:
        dashboard = RealTimeAnalysisDashboard()
        layout = dashboard.create_dashboard_layout()
        
        with Live(layout, refresh_per_second=2, console=console) as live:
            dashboard.update_header(layout)
            dashboard.update_threat_intelligence_panel(layout, analysis_results)
            dashboard.update_network_analysis_panel(layout, analysis_results)
            dashboard.update_geolocation_panel(layout, analysis_results)
            dashboard.update_footer(layout)
            
            # Keep dashboard running
            rprint("\n[bold cyan]📊 Real-time dashboard active. Press Ctrl+C to exit...[/bold cyan]")
            try:
                while True:
                    time.sleep(1)
                    dashboard.update_footer(layout)
            except KeyboardInterrupt:
                rprint("\n[yellow]Dashboard stopped by user[/yellow]")
    else:
        display_analysis_results(analysis_results)
    
    # Generate comprehensive report
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_file = os.path.join(output_dir, f"ultra_advanced_analysis_{timestamp}.json")
    
    console.print(f"\n[bold cyan]📋 Generating comprehensive report...[/bold cyan]")
    analyzer.generate_comprehensive_report(analysis_results, output_file)
    
    # Display final summary
    display_final_summary(analysis_results, output_file)

def display_analysis_results(results: Dict[str, Any]):
    """Display comprehensive analysis results"""
    console.print("\n" + "="*80)
    console.print("[bold cyan]🔬 ULTRA ADVANCED ANALYSIS RESULTS[/bold cyan]")
    console.print("="*80)
    
    # Executive Summary
    executive_summary = generate_executive_summary(results)
    summary_table = Table(title="📊 Executive Summary", show_header=True, header_style="bold magenta")
    summary_table.add_column("Metric", style="cyan")
    summary_table.add_column("Value", style="green")
    summary_table.add_column("Risk Level", style="red")
    
    summary_table.add_row("Threat Level", executive_summary.get("threat_level", "Unknown"), 
                         executive_summary.get("threat_level", "Unknown"))
    summary_table.add_row("Confidence", f"{executive_summary.get('confidence', 0.0):.2f}", 
                         "High" if executive_summary.get('confidence', 0.0) > 0.7 else "Medium")
    summary_table.add_row("File Entropy", f"{results.get('file_info', {}).get('entropy', 0.0):.2f}",
                         "High" if results.get('file_info', {}).get('entropy', 0.0) > 7.0 else "Low")
    
    console.print(summary_table)
    console.print()
    
    # Threat Attribution
    attribution = results.get('attribution', {})
    if attribution.get('primary_suspects'):
        attr_table = Table(title="🎯 Threat Actor Attribution", show_header=True, header_style="bold red")
        attr_table.add_column("Threat Actor", style="cyan")
        attr_table.add_column("Confidence", style="yellow")
        attr_table.add_column("Country", style="green")
        attr_table.add_column("Evidence", style="magenta")
        
        confidence_scores = attribution.get('confidence_scores', {})
        for actor in attribution['primary_suspects'][:5]:
            confidence = confidence_scores.get(actor, 0.0)
            evidence_count = len(attribution.get('attribution_evidence', {}).get(actor, {}))
            attr_table.add_row(actor, f"{confidence:.2f}", "Various", f"{evidence_count} indicators")
            
        console.print(attr_table)
        console.print()
    
    # Network Analysis
    network_analysis = results.get('network_analysis', {})
    if network_analysis:
        network_table = Table(title="🌐 Network Analysis Summary", show_header=True, header_style="bold blue")
        network_table.add_column("Category", style="cyan")
        network_table.add_column("Count", style="yellow")
        network_table.add_column("Risk", style="red")
        
        c2_count = len(network_analysis.get('c2_communications', []))
        dga_count = len(network_analysis.get('dga_domains', []))
        suspicious_count = len(network_analysis.get('suspicious_connections', []))
        
        network_table.add_row("C2 Communications", str(c2_count), "Critical" if c2_count > 0 else "Low")
        network_table.add_row("DGA Domains", str(dga_count), "High" if dga_count > 0 else "Low")
        network_table.add_row("Suspicious Connections", str(suspicious_count), "Medium" if suspicious_count > 0 else "Low")
        
        console.print(network_table)
        console.print()
    
    # YARA Detections
    yara_matches = results.get('yara_matches', [])
    if yara_matches:
        yara_table = Table(title="🔍 YARA Detections", show_header=True, header_style="bold yellow")
        yara_table.add_column("Rule", style="cyan")
        yara_table.add_column("Description", style="green")
        yara_table.add_column("Matches", style="yellow")
        
        for match in yara_matches:
            rule_name = match.get('rule', 'Unknown')
            description = match.get('meta', {}).get('description', 'No description')
            match_count = len(match.get('strings', []))
            yara_table.add_row(rule_name, description, str(match_count))
            
        console.print(yara_table)

def generate_executive_summary(results: Dict[str, Any]) -> Dict[str, Any]:
    """Generate executive summary of analysis results"""
    summary = {
        "threat_level": "Unknown",
        "confidence": 0.0,
        "key_findings": [],
        "risk_factors": 0
    }
    
    try:
        risk_factors = 0
        
        # YARA matches increase threat level
        yara_matches = len(results.get('yara_matches', []))
        if yara_matches > 0:
            risk_factors += yara_matches
            
        # Attribution confidence
        attribution = results.get('attribution', {})
        if attribution.get('primary_suspects'):
            confidence_scores = attribution.get('confidence_scores', {})
            max_confidence = max(confidence_scores.values()) if confidence_scores else 0.0
            risk_factors += int(max_confidence * 5)  # Scale to 0-5
            
        # Network indicators
        network_analysis = results.get('network_analysis', {})
        if network_analysis.get('c2_communications'):
            risk_factors += 3
        if network_analysis.get('dga_domains'):
            risk_factors += 2
            
        # Determine threat level
        if risk_factors >= 8:
            summary["threat_level"] = "Critical"
            summary["confidence"] = 0.9
        elif risk_factors >= 5:
            summary["threat_level"] = "High"
            summary["confidence"] = 0.8
        elif risk_factors >= 2:
            summary["threat_level"] = "Medium"
            summary["confidence"] = 0.6
        else:
            summary["threat_level"] = "Low"
            summary["confidence"] = 0.3
            
        summary["risk_factors"] = risk_factors
        
    except Exception as e:
        console.print(f"[red]Error generating executive summary: {e}[/red]")
        
    return summary

def display_final_summary(results: Dict[str, Any], report_file: str):
    """Display final analysis summary"""
    console.print("\n" + "="*80)
    console.print("[bold green]🎉 ANALYSIS COMPLETED SUCCESSFULLY[/bold green]")
    console.print("="*80)
    
    # Summary stats
    stats_table = Table(title="📈 Analysis Statistics", show_header=True, header_style="bold cyan")
    stats_table.add_column("Component", style="cyan")
    stats_table.add_column("Status", style="green")
    stats_table.add_column("Findings", style="yellow")
    
    # File analysis
    file_info = results.get('file_info', {})
    stats_table.add_row("File Analysis", "✅ Complete", f"Entropy: {file_info.get('entropy', 0.0):.2f}")
    
    # Threat intelligence
    attribution = results.get('attribution', {})
    suspects_count = len(attribution.get('primary_suspects', []))
    stats_table.add_row("Threat Attribution", "✅ Complete", f"{suspects_count} suspects identified")
    
    # Network analysis
    network_analysis = results.get('network_analysis', {})
    if network_analysis:
        network_findings = len(network_analysis.get('c2_communications', [])) + len(network_analysis.get('dga_domains', []))
        stats_table.add_row("Network Forensics", "✅ Complete", f"{network_findings} network indicators")
    else:
        stats_table.add_row("Network Forensics", "⚠️ Skipped", "No PCAP file provided")
    
    # YARA analysis
    yara_count = len(results.get('yara_matches', []))
    stats_table.add_row("YARA Detection", "✅ Complete", f"{yara_count} rules matched")
    
    console.print(stats_table)
    console.print()
    
    # Key recommendations
    console.print("[bold cyan]🔔 KEY RECOMMENDATIONS:[/bold cyan]")
    executive_summary = generate_executive_summary(results)
    threat_level = executive_summary.get("threat_level", "Unknown")
    
    if threat_level in ["Critical", "High"]:
        console.print("• [red]IMMEDIATE ACTION REQUIRED[/red]")
        console.print("• Quarantine affected systems immediately")
        console.print("• Activate incident response procedures") 
        console.print("• Notify security team and stakeholders")
        console.print("• Implement additional monitoring")
    elif threat_level == "Medium":
        console.print("• Enhanced monitoring recommended")
        console.print("• Review security controls")
        console.print("• Update threat intelligence")
    else:
        console.print("• Continue routine monitoring")
        console.print("• Maintain current security posture")
    
    console.print(f"\n[bold green]📋 Detailed report saved to: {report_file}[/bold green]")
    console.print("[bold cyan]🚀 RYHA Ultra Advanced Analysis Complete![/bold cyan]")

@app.command()
def threat_hunt(
    target_dir: str = typer.Argument(..., help="Directory to hunt for threats"),
    output_dir: str = typer.Option("./hunt_reports", "--output", "-o", help="Output directory for hunt reports"),
    parallel: bool = typer.Option(True, "--parallel", "-p", help="Enable parallel processing"),
    deep_scan: bool = typer.Option(True, "--deep", "-d", help="Enable deep scanning")
):
    """🔍 Advanced Threat Hunting across multiple files"""
    
    console.print(Panel("🔍 RYHA THREAT HUNTING MODE", style="bold red"))
    
    # Implementation for threat hunting mode
    rprint("[yellow]Threat hunting mode - Implementation in progress[/yellow]")

@app.command()
def live_monitor(
    interface: str = typer.Option("eth0", "--interface", "-i", help="Network interface to monitor"),
    duration: int = typer.Option(300, "--duration", "-d", help="Monitoring duration in seconds"),
    output_dir: str = typer.Option("./live_reports", "--output", "-o", help="Output directory")
):
    """📡 Live Network Monitoring and Real-time Threat Detection"""
    
    console.print(Panel("📡 RYHA LIVE MONITORING MODE", style="bold blue"))
    
    # Implementation for live monitoring
    rprint("[yellow]Live monitoring mode - Implementation in progress[/yellow]")

@app.command()
def intelligence(
    query: str = typer.Argument(..., help="Threat intelligence query"),
    source: str = typer.Option("all", "--source", "-s", help="Intelligence source (virustotal, misp, etc.)"),
    output_format: str = typer.Option("json", "--format", "-f", help="Output format (json, csv, table)")
):
    """🧠 Threat Intelligence Lookup and Correlation"""
    
    console.print(Panel("🧠 RYHA THREAT INTELLIGENCE MODE", style="bold magenta"))
    
    # Implementation for threat intelligence queries
    rprint("[yellow]Threat intelligence mode - Implementation in progress[/yellow]")

if __name__ == "__main__":
    try:
        app()
    except KeyboardInterrupt:
        rprint("\n[yellow]Analysis interrupted by user[/yellow]")
    except Exception as e:
        rprint(f"\n[red]Fatal error: {e}[/red]")
        import traceback
        traceback.print_exc()
