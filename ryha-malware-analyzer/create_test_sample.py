#!/usr/bin/env python3
"""
Test sample for RYHA Ultra Advanced Malware Analyzer
Demonstrates the ultra advanced analysis capabilities
"""

import os
import sys
import time
import tempfile
import struct
from datetime import datetime

def create_test_sample():
    """Create a test binary file with various suspicious characteristics"""
    
    # Create a test PE-like file with suspicious characteristics
    test_data = b""
    
    # Add PE header signature
    test_data += b"MZ"  # DOS signature
    test_data += b"\x00" * 58  # DOS header padding
    test_data += struct.pack("<L", 0x80)  # PE header offset
    
    # Add some padding
    test_data += b"\x00" * (0x80 - len(test_data))
    
    # Add PE signature
    test_data += b"PE\x00\x00"
    
    # Add COFF header
    test_data += struct.pack("<H", 0x014c)  # Machine (i386)
    test_data += struct.pack("<H", 3)       # Number of sections
    test_data += struct.pack("<L", int(time.time()))  # Timestamp
    test_data += b"\x00" * 16  # Rest of COFF header
    
    # Add optional header
    test_data += struct.pack("<H", 0x010b)  # Magic (PE32)
    test_data += b"\x00" * 94  # Rest of optional header
    
    # Add suspicious strings
    suspicious_strings = [
        b"CreateRemoteThread\x00",
        b"WriteProcessMemory\x00", 
        b"VirtualAllocEx\x00",
        b"GetProcAddress\x00",
        b"LoadLibrary\x00",
        b"CryptAcquireContext\x00",
        b"InternetOpen\x00",
        b"HttpSendRequest\x00",
        b"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\x00",
        b"malware_config_key\x00",
        b"C:\\Windows\\System32\\evil.dll\x00",
        b"http://malicious-c2.example.com/beacon\x00",
        b"192.168.1.100\x00",
        b"user@evil-domain.com\x00",
        b"\xde\xad\xbe\xef" * 10,  # High entropy data
        b"APT_GROUP_SIGNATURE_2025\x00",
        b"CHINA_APT_TOOL_V2\x00",
        b"LAZARUS_PAYLOAD\x00"
    ]
    
    # Add the suspicious strings
    for string in suspicious_strings:
        test_data += string
        
    # Add some high-entropy data to simulate packing/encryption
    import random
    random.seed(42)  # Reproducible results
    high_entropy_data = bytes([random.randint(0, 255) for _ in range(1024)])
    test_data += high_entropy_data
    
    # Add some repetitive data to lower average entropy slightly
    test_data += b"AAAA" * 256
    
    return test_data

def main():
    """Create test sample and run ultra advanced analysis"""
    
    print("🔬 Creating test sample for RYHA Ultra Advanced Analyzer...")
    
    # Create test sample
    test_data = create_test_sample()
    
    # Write to temporary file
    with tempfile.NamedTemporaryFile(delete=False, suffix=".exe") as f:
        f.write(test_data)
        test_file = f.name
    
    print(f"✅ Test sample created: {test_file}")
    print(f"📊 Sample size: {len(test_data)} bytes")
    
    # Display test file info
    print("\n🔍 Test Sample Characteristics:")
    print("• PE-like structure with suspicious imports")
    print("• Registry persistence indicators")
    print("• Network communication strings") 
    print("• Process injection APIs")
    print("• High entropy sections (simulated packing)")
    print("• APT group attribution indicators")
    print("• Malicious domain and IP addresses")
    
    print(f"\n🚀 Run analysis with:")
    print(f"python enhanced_cli.py ultra-scan {test_file}")
    print(f"python enhanced_cli.py ultra-scan {test_file} --real-time")
    
    # Also create a simple network capture file simulation
    pcap_file = test_file.replace(".exe", ".pcap")
    print(f"\n📡 Simulated PCAP file: {pcap_file}")
    print("(In real usage, provide actual network capture)")
    
    return test_file

if __name__ == "__main__":
    test_file = main()
