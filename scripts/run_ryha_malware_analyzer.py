#!/usr/bin/env python3
"""
Unified Ryha Malware Analyzer Runner
Uses existing ryha-malware-analyzer folder capabilities with single command
Usage: python run_ryha_malware_analyzer.py <target_file>
       python run_ryha_malware_analyzer.py --help
"""

import sys
import os
import json
import subprocess
from datetime import datetime
from pathlib import Path

def show_help():
    """Display help information"""
    print("üõ°Ô∏è  Ryha Malware Analyzer - HPTA Security Suite")
    print("=" * 60)
    print("Usage: python run_ryha_malware_analyzer.py <target_file>")
    print("")
    print("Options:")
    print("  <target_file>    Path to file for malware analysis")
    print("  --help          Show this help message")
    print("")
    print("Examples:")
    print("  python run_ryha_malware_analyzer.py sample.exe")
    print("  python run_ryha_malware_analyzer.py /path/to/suspicious_file.bin")
    print("")
    print("Features:")
    print("  ‚úì Static Analysis (Hashes, Strings, File Type)")
    print("  ‚úì IOC Scanning (Reputation, VT Integration)")
    print("  ‚úì Unpacker Analysis (Entropy, Packing Detection)")
    print("  ‚úì Dynamic Analysis (Sandbox Simulation)")
    print("  ‚úì Memory Analysis (Process Monitoring)")
    print("  ‚úì Network Analysis (Traffic Analysis)")
    print("  ‚úì Dropper Detection (File Dropping)")
    print("  ‚úì JSON Report Generation")

def run_ryha_malware_analyzer(target_file):
    """Run Ryha malware analyzer with unified command"""
    print(f"üöÄ Starting Ryha Malware Analysis for: {target_file}")
    print("=" * 80)
    
    # Check if target file exists
    if not Path(target_file).exists():
        print(f"‚ùå Target file not found: {target_file}")
        return None
    
    # Change to ryha-malware-analyzer directory (go up one level first)
    ryha_dir = Path("../ryha-malware-analyzer")
    if not ryha_dir.exists():
        print("‚ùå ryha-malware-analyzer folder not found!")
        return None
    
    original_dir = os.getcwd()
    
    try:
        os.chdir(ryha_dir)
        
        # Copy target file to analysis directory if needed
        target_path = Path(target_file)
        if target_path.is_absolute():
            # If absolute path, copy to current directory
            import shutil
            local_target = target_path.name
            shutil.copy2(target_path, local_target)
            analysis_target = local_target
        else:
            # If relative path, convert to absolute path from original directory
            abs_target_path = os.path.abspath(os.path.join(original_dir, target_file))
            analysis_target = abs_target_path
        
        print("üîç Running comprehensive malware analysis...")
        
        # Run full analysis using the CLI
        result = subprocess.run([
            sys.executable, "cli.py", "analyze", analysis_target, "--full", "--report", "json", "--save"
        ], capture_output=True, text=True, timeout=600)
        
        print("üìä Analysis Output:")
        print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è Warnings/Errors:")
            print(result.stderr)
        
        # Look for generated reports
        reports_dir = Path("reports")
        report_files = []
        
        if reports_dir.exists():
            # Find JSON reports
            json_dir = reports_dir / "json"
            html_dir = reports_dir / "html"
            markdown_dir = reports_dir / "markdown"
            
            json_reports = []
            html_reports = []
            markdown_reports = []
            
            if json_dir.exists():
                json_reports = list(json_dir.glob("*.json"))
            if html_dir.exists():
                html_reports = list(html_dir.glob("*.html"))
            if markdown_dir.exists():
                markdown_reports = list(markdown_dir.glob("*.md"))
            
            report_files.extend(json_reports)
            report_files.extend(html_reports)
            report_files.extend(markdown_reports)
        
        # Create unified report
        report_data = {
            "target_file": target_file,
            "timestamp": datetime.now().isoformat(),
            "analyzer": "RyhaMalwareAnalyzer",
            "status": "completed" if result.returncode == 0 else "error",
            "output": result.stdout,
            "errors": result.stderr if result.stderr else None,
            "generated_reports": [str(f) for f in report_files],
            "analysis_modules": {
                "static_analysis": "completed",
                "ioc_scanning": "completed", 
                "unpacker_analysis": "completed",
                "dynamic_analysis": "simulated",
                "memory_analysis": "simulated",
                "network_analysis": "simulated",
                "dropper_detection": "completed"
            }
        }
        
        # Try to read the latest JSON report if available
        json_reports = [f for f in report_files if f.suffix == '.json']
        if json_reports:
            latest_report = max(json_reports, key=lambda x: x.stat().st_mtime)
            try:
                with open(latest_report, 'r', encoding='utf-8') as f:
                    detailed_analysis = json.load(f)
                    report_data["detailed_analysis"] = detailed_analysis
                print(f"‚úÖ Loaded detailed analysis from: {latest_report}")
            except Exception as e:
                print(f"‚ö†Ô∏è Could not read detailed report: {e}")
        
        # Also try to run individual scans for more comprehensive results
        print("\nüîç Running additional analysis modules...")
        
        # Static analysis
        try:
            static_result = subprocess.run([
                sys.executable, "cli.py", "scan", analysis_target, "--static", "--save"
            ], capture_output=True, text=True, timeout=120)
            
            if static_result.returncode == 0:
                report_data["static_scan_output"] = static_result.stdout
        except:
            pass
        
        # IOC scanning
        try:
            ioc_result = subprocess.run([
                sys.executable, "cli.py", "scan", analysis_target, "--ioc", "--save"
            ], capture_output=True, text=True, timeout=120)
            
            if ioc_result.returncode == 0:
                report_data["ioc_scan_output"] = ioc_result.stdout
        except:
            pass
        
        return report_data
        
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è Analysis timeout - process took too long")
        return None
    except Exception as e:
        print(f"‚ùå Error running analyzer: {e}")
        return None
    finally:
        os.chdir(original_dir)

def save_json_report(report_data):
    """Save unified JSON report"""
    if not report_data:
        return None
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"ryha_malware_unified_report_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, indent=2, ensure_ascii=False)
    
    print(f"üìÑ Unified JSON Report saved: {filename}")
    return filename

def main():
    if len(sys.argv) != 2:
        print("Usage: python run_ryha_malware_analyzer.py <target_file>")
        print("       python run_ryha_malware_analyzer.py --help")
        print("Example: python run_ryha_malware_analyzer.py suspicious_file.exe")
        print("Example: python run_ryha_malware_analyzer.py /path/to/malware")
        sys.exit(1)
    
    # Handle help argument
    if sys.argv[1] in ["--help", "-h", "help"]:
        show_help()
        return
    
    target_file = sys.argv[1]
    
    try:
        # Run the analyzer
        results = run_ryha_malware_analyzer(target_file)
        
        if results:
            # Save unified report
            report_file = save_json_report(results)
            
            print("\n" + "=" * 80)
            print("‚úÖ Ryha Malware Analysis completed successfully!")
            print(f"üìä Unified report saved to: {report_file}")
            
            # Show summary if detailed analysis available
            if "detailed_analysis" in results:
                analysis = results["detailed_analysis"]
                print("\nüìã Analysis Summary:")
                if "risk_level" in analysis:
                    print(f"üö® Risk Level: {analysis['risk_level']}")
                if "malware_family" in analysis:
                    print(f"ü¶† Malware Family: {analysis['malware_family']}")
                if "threats_detected" in analysis:
                    print(f"‚ö†Ô∏è  Threats Detected: {analysis['threats_detected']}")
            
            # Show module completion status
            print("\nüîß Analysis Modules:")
            for module, status in results["analysis_modules"].items():
                status_icon = "‚úÖ" if status == "completed" else "üîÑ" if status == "simulated" else "‚ùå"
                print(f"  {status_icon} {module}: {status}")
            
            print("=" * 80)
        else:
            print("‚ùå Analyzer failed to complete")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Analysis interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()